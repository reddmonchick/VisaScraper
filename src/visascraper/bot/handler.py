import logging
import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy.orm import Session
from aiogram.types import FSInputFile

from database.db import SessionLocal
from database.models import User
from database.crud import search_by_passport, search_by_stay_permit
from bot.keyboards import main_menu, admin_menu

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BOT_PASSWORD = os.getenv("TELEGRAM_BOT_PASSWORD")
ADMIN_USER_IDS = [uid.strip() for uid in os.getenv("ADMIN_USER_IDS", "").split(",") if uid.strip()]

if not BOT_TOKEN or not BOT_PASSWORD:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

bot_router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
is_parsing_running = False

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class PassportSearch(StatesGroup):
    waiting_for_passport = State()

class StayPermitSearch(StatesGroup):
    waiting_for_stay_permit = State()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_user_by_telegram_id(db: Session, telegram_id: str):
    return db.query(User).filter(User.telegram_id == telegram_id).first()

def create_or_update_user(db: Session, telegram_id: str):
    try:
        user = get_user_by_telegram_id(db, telegram_id)
        if not user:
            user = User(telegram_id=telegram_id, password=BOT_PASSWORD)
            db.add(user)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
        else:
            user.password = BOT_PASSWORD
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id}")
        db.commit()
        return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.rollback()
        return None

def is_authorized(db: Session, telegram_id: str) -> bool:
    user = get_user_by_telegram_id(db, telegram_id)
    return user is not None and user.password == BOT_PASSWORD


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot_router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {user_id}")
 
    with SessionLocal() as db:
        if is_authorized(db, user_id):
            await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", reply_markup=main_menu(user_id))
        else:
            await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
@bot_router.callback_query(F.data == "admin_panel")
async def callback_admin(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    
    if user_id not in ADMIN_USER_IDS:
        await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    await callback.message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
    await callback.answer()

@bot_router.callback_query(F.data == "start_parsing_others")
async def start_parsing_others(callback: CallbackQuery, bot: Bot, app):
    global is_parsing_running
    user_id = str(callback.from_user.id)
    
    if user_id not in ADMIN_USER_IDS:
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return

    if is_parsing_running:
        await callback.answer("–ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", show_alert=True)
        return

    is_parsing_running = True
    await callback.message.answer("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    await callback.answer()
    
    try:
        await asyncio.to_thread(app.job_scheduler.job_others)
        await bot.send_message(user_id, "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    except Exception as e:
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}", exc_info=True)
    finally:
        is_parsing_running = False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
@bot_router.callback_query(F.data == "search_passport")
async def start_search(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    
    with SessionLocal() as db:
        if not is_authorized(db, user_id):
            await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            await callback.answer()
            return

    await state.set_state(PassportSearch.waiting_for_passport)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
        "–ü—Ä–∏–º–µ—Ä: ROMAN DUDUKALOV 4729312290"
    )
    await callback.answer()

@bot_router.message(PassportSearch.waiting_for_passport)
async def process_passport_input(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    search_input = message.text.strip().upper()
    
    with SessionLocal() as db:
        if not is_authorized(db, user_id):
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            await state.clear()
            return

        try:
            results = search_by_passport(db, search_input)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
            await state.clear()
            return

    if not results:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(user_id))
        await state.clear()
        return

    for result in results:
        info = f"""
–ë–∞—Ç—á –Ω–æ–º–µ—Ä: {result.batch_no}
–†–µ–≥. –Ω–æ–º–µ—Ä: {result.register_number}
–ü–æ–ª–Ω–æ–µ –∏–º—è: {result.full_name}
–ù–æ–º–µ—Ä –≤–∏–∑—ã: {result.visitor_visa_number}
–¢–∏–ø –≤–∏–∑—ã: {result.visa_type}
–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {result.passport_number}
–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {result.payment_date}
–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {result.birth_date}
–°—Ç–∞—Ç—É—Å: {result.status}
–ê–∫–∫–∞—É–Ω—Ç: {result.account}
        """.strip()
        
        file_path = f"src/temp/{result.register_number}_batch_application.pdf"
        
        if os.path.exists(file_path):
            try:
                await message.answer_document(
                    document=FSInputFile(file_path),
                    caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{info}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è {result.register_number}")
        else:
            await message.answer(f"{info}\n\n‚ö†Ô∏è –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(user_id))
    await state.clear()

@bot_router.callback_query(F.data == "search_stay_permit")
async def start_search_stay(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    
    with SessionLocal() as db:
        if not is_authorized(db, user_id):
            await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            await callback.answer()
            return

    await state.set_state(StayPermitSearch.waiting_for_stay_permit)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
        "–ü—Ä–∏–º–µ—Ä: ROMAN DUDUKALOV 4729312290"
    )
    await callback.answer()

@bot_router.message(StayPermitSearch.waiting_for_stay_permit)
async def process_stay_permit_input(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    search_input = message.text.strip().upper()
    
    with SessionLocal() as db:
        if not is_authorized(db, user_id):
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            await state.clear()
            return

        try:
            results = search_by_stay_permit(db, search_input)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
            await state.clear()
            return

    if not results:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(user_id))
        await state.clear()
        return

    for result in results:
        info = f"""
–†–µ–≥. –Ω–æ–º–µ—Ä: {result.reg_number}
–ü–æ–ª–Ω–æ–µ –∏–º—è: {result.name}
–¢–∏–ø —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {result.type_of_staypermit}
–¢–∏–ø –≤–∏–∑—ã: {result.visa_type}
–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞: {result.passport_number}
–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {result.arrival_date}
–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {result.issue_date}
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {result.expired_date}
–°—Ç–∞—Ç—É—Å: {result.status}
–ê–∫–∫–∞—É–Ω—Ç: {result.account}
        """.strip()
        
        file_path = f"src/temp/{result.reg_number}_stay_permit.pdf"
        
        if os.path.exists(file_path):
            try:
                await message.answer_document(
                    document=FSInputFile(file_path),
                    caption=f"üè† –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{info}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è {result.reg_number}")
        else:
            await message.answer(f"üè† –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{info}\n\n‚ö†Ô∏è –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(user_id))
    await state.clear()

@bot_router.message(F.text)
async def check_password_or_other_text(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    entered_password = message.text.strip()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if user_id in ADMIN_USER_IDS:
        with SessionLocal() as db:
            user = create_or_update_user(db, user_id)
            if user:
                await message.answer("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞!", reply_markup=main_menu(user_id))
                return
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with SessionLocal() as db:
        if is_authorized(db, user_id):
            await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", reply_markup=main_menu(user_id))
            return

    if entered_password != BOT_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    with SessionLocal() as db:
        user = create_or_update_user(db, user_id)
        if user:
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=main_menu(user_id))
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")