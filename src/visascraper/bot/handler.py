from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import os
from dotenv import load_dotenv
from sqlalchemy.orm import Session

from visascraper.database.db import SessionLocal
from visascraper.database.models import User
from visascraper.database.crud import search_by_passport

load_dotenv()

router = Router()
BOT_PASSWORD = os.getenv("TELEGRAM_BOT_PASSWORD")

# === –ú–æ–¥–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞ ===
class PassportSearch(StatesGroup):
    waiting_for_passport = State()
    waiting_for_stay_permit = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# === –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ===
def get_user_by_telegram_id(db: Session, telegram_id: str):
    return db.query(User).filter(User.telegram_id == telegram_id).first()

def create_or_update_user(db: Session, telegram_id: str):
    user = get_user_by_telegram_id(db, telegram_id)
    if not user:
        user = User(telegram_id=telegram_id, password=BOT_PASSWORD)
        db.add(user)
    else:
        user.password = BOT_PASSWORD
    db.commit()
    db.refresh(user)
    return user

def is_authorized(db: Session, telegram_id: str) -> bool:
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    return user is not None and user.password == BOT_PASSWORD

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def main_menu():
    kb = [
        [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤–∏–∑—ã", callback_data="search_passport")],
        [InlineKeyboardButton(text="üè† –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞", callback_data="search_stay_permit")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)

    with SessionLocal() as db:
        if is_authorized(db, user_id):
            await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", reply_markup=main_menu())
        else:
            await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@router.message(PassportSearch.waiting_for_passport)
async def process_passport_input(message: Message, state: FSMContext):
    search_input = message.text.strip().upper()
    
    with SessionLocal() as db:
        results = search_by_passport(db, search_input)

    if not results:
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await state.clear()
        return

    for result in results:
        info = "\n".join([f"{key}: {value}" for key, value in result.__dict__.items() if not key.startswith("_")])
        await message.answer(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{info}")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    await state.clear()


@router.message(F.text)
async def check_password_or_other_text(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)

    with SessionLocal() as db:
        if is_authorized(db, user_id):
            # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            return await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", reply_markup=main_menu())

    entered_password = message.text.strip()
    if entered_password != BOT_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    with SessionLocal() as db:
        create_or_update_user(db, user_id)
        db.commit()
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=main_menu())


@router.callback_query(lambda c: c.data == "search_passport")
async def start_search(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)

    with SessionLocal() as db:
        if not is_authorized(db, user_id):
            return await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

    await state.set_state(PassportSearch.waiting_for_passport)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞")
    await callback.message.answer("–ü—Ä–∏–º–µ—Ä: ROMAN DUDUKALOV 4729312290")

@router.message(PassportSearch.waiting_for_stay_permit)
async def process_stay_permit_input(message: Message, state: FSMContext):
    search_input = message.text.strip().upper()

    with SessionLocal() as db:
        results = search_by_stay_permit(db, search_input)

    if not results:
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await state.clear()
        return

    for result in results:
        info = "\n".join([f"{key}: {value}" for key, value in result.__dict__.items() if not key.startswith("_")])
        await message.answer(f"üè† –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{info}")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    await state.clear()

@router.callback_query(lambda c: c.data == "search_stay_permit")
async def start_search_stay(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)

    with SessionLocal() as db:
        if not is_authorized(db, user_id):
            return await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

    await state.set_state(PassportSearch.waiting_for_stay_permit)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞")
    await callback.message.answer("–ü—Ä–∏–º–µ—Ä: ROMAN DUDUKALOV 4729312290")