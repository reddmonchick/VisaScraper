import logging
import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy.orm import Session
from aiogram.types import FSInputFile

from database.db import SessionLocal
from database.models import User
from database.crud import search_by_passport, search_by_stay_permit
from .keyboards import main_menu, admin_menu # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BOT_PASSWORD = os.getenv("TELEGRAM_BOT_PASSWORD")
# –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞
TELEGRAM_ADMIN_PASSWORD = os.getenv("TELEGRAM_ADMIN_PASSWORD")


if not BOT_TOKEN or not BOT_PASSWORD or not TELEGRAM_ADMIN_PASSWORD:
    logger.error("–û–¥–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (TELEGRAM_BOT_TOKEN, TELEGRAM_BOT_PASSWORD, TELEGRAM_ADMIN_PASSWORD) –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env")
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot_router = Router()

# --- –ù–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
authorized_admins = set()
is_parsing_running = False

class AdminLogin(StatesGroup):
    waiting_for_password = State()
# --- –ö–æ–Ω–µ—Ü –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---

class PassportSearch(StatesGroup):
    waiting_for_passport = State()

class StayPermitSearch(StatesGroup):
    waiting_for_stay_permit = State()

def get_user_by_telegram_id(db: Session, telegram_id: str):
    try:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: telegram_id={telegram_id}, –Ω–∞–π–¥–µ–Ω={user is not None}")
        return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

def create_or_update_user(db: Session, telegram_id: str):
    try:
        user = get_user_by_telegram_id(db, telegram_id)
        if not user:
            user = User(telegram_id=telegram_id, password=BOT_PASSWORD)
            db.add(user)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: telegram_id={telegram_id}")
        else:
            user.password = BOT_PASSWORD
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: telegram_id={telegram_id}")
        db.commit()
        db.refresh(user)
        return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.rollback()
        return None

def is_authorized(db: Session, telegram_id: str) -> bool:
    user = get_user_by_telegram_id(db, telegram_id)
    authorized = user is not None and user.password == BOT_PASSWORD
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: telegram_id={telegram_id}, authorized={authorized}")
    return authorized

# --- –ù–æ–≤—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---

@bot_router.message(F.text == "/admin")
async def cmd_admin(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: telegram_id={user_id}")

    if user_id in authorized_admins:
        await message.answer("–í—ã —É–∂–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=admin_menu())
        return

    await state.set_state(AdminLogin.waiting_for_password)
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

@bot_router.message(AdminLogin.waiting_for_password)
async def process_admin_password(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    entered_password = message.text.strip()

    if entered_password == TELEGRAM_ADMIN_PASSWORD:
        authorized_admins.add(user_id)
        await state.clear()
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.", reply_markup=admin_menu())
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º –æ—Ç {user_id}.")

@bot_router.callback_query(F.data == "start_parsing_others")
async def start_parsing_others(callback: CallbackQuery, bot: Bot, app): # app –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —á–µ—Ä–µ–∑ middleware
    user_id = str(callback.from_user.id)
    global is_parsing_running

    if user_id not in authorized_admins:
        await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return

    if is_parsing_running:
        await callback.answer("–ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", show_alert=True)
        return

    is_parsing_running = True
    await callback.message.answer("üöÄ –ü—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω...")
    await callback.answer()
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –ø–∞—Ä—Å–∏–Ω–≥.")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é, —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        await asyncio.to_thread(app.job_scheduler.job_others)
        await bot.send_message(user_id, "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e:
        await bot.send_message(user_id, f"‚ùå –í–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞, –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}: {e}", exc_info=True)
    finally:
        is_parsing_running = False

# --- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---

@bot_router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: telegram_id={user_id}")
 
    with SessionLocal() as db:
        if is_authorized(db, user_id):
            await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", reply_markup=main_menu())
        else:
            await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    current_state = await state.get_state()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ /start: {current_state}")

@bot_router.callback_query(lambda c: c.data == "search_passport")
async def start_search(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    logger.info(f"Callback search_passport –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}")

    with SessionLocal() as db:
        if not is_authorized(db, user_id):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            await callback.answer()
            return

    await state.clear()
    await state.set_state(PassportSearch.waiting_for_passport)
    current_state = await state.get_state()
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state} –¥–ª—è user_id={user_id}")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞")
    await callback.message.answer("–ü—Ä–∏–º–µ—Ä: ROMAN DUDUKALOV 4729312290")
    await callback.answer()

@bot_router.message(PassportSearch.waiting_for_passport)
async def process_passport_input(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    current_state = await state.get_state()
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ PassportSearch.waiting_for_passport: text={message.text}, user_id={user_id}, state={current_state}")

    with SessionLocal() as db:
        if not is_authorized(db, user_id):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            await state.clear()
            return

    search_input = message.text.strip().upper()
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É: input={search_input}, user_id={user_id}")

    with SessionLocal() as db:
        try:
            results = search_by_passport(db, search_input)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É: –Ω–∞–π–¥–µ–Ω–æ={len(results) if results else 0} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
            await state.clear()
            return

    if not results:
        logger.info(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_input}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await state.clear()
        return

    for result in results:
        info_data = {
            "–ë–∞—Ç—á –Ω–æ–º–µ—Ä": result.batch_no,
            "–†–µ–≥. –Ω–æ–º–µ—Ä": result.register_number,
            "–ü–æ–ª–Ω–æ–µ –∏–º—è": result.full_name,
            "–ù–æ–º–µ—Ä –≤–∏–∑—ã": result.visitor_visa_number,
            "–¢–∏–ø –≤–∏–∑—ã": result.visa_type,
            "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞": result.passport_number,
            "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã": result.payment_date,
            "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è": result.birth_date,
            "–°—Ç–∞—Ç—É—Å": result.status,
            "–ê–∫–∫–∞—É–Ω—Ç": result.account
        }
        info = "\n".join([f"{key}: {value}" for key, value in info_data.items()])
        
        file_path = f"src/temp/{result.register_number}_batch_application.pdf"
        
        if os.path.exists(file_path):
            try:
                document = FSInputFile(file_path)
                await message.answer_document(
                    document=document,
                    caption=f" –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∏–∑—ã:\n\n{info}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–≥. –Ω–æ–º–µ—Ä–∞ {result.reg_number}")
        else:
            logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            await message.answer(f" –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{info}\n\n‚ö†Ô∏è –§–∞–π–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è user_id={user_id}")

@bot_router.callback_query(lambda c: c.data == "search_stay_permit")
async def start_search_stay(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    logger.info(f"Callback search_stay_permit –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}")

    with SessionLocal() as db:
        if not is_authorized(db, user_id):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            await callback.message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            await callback.answer()
            return

    await state.clear()
    await state.set_state(StayPermitSearch.waiting_for_stay_permit)
    current_state = await state.get_state()
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state} –¥–ª—è user_id={user_id}")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞")
    await callback.message.answer("–ü—Ä–∏–º–µ—Ä: ROMAN DUDUKALOV 4729312290")
    await callback.answer()

@bot_router.message(StayPermitSearch.waiting_for_stay_permit)
async def process_stay_permit_input(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    current_state = await state.get_state()
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ StayPermitSearch.waiting_for_stay_permit: text={message.text}, user_id={user_id}, state={current_state}")

    with SessionLocal() as db:
        if not is_authorized(db, user_id):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            await state.clear()
            return

    search_input = message.text.strip().upper()
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é –Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ: input={search_input}, user_id={user_id}")

    with SessionLocal() as db:
        try:
            results = search_by_stay_permit(db, search_input)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é: –Ω–∞–π–¥–µ–Ω–æ={len(results) if results else 0} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
            await state.clear()
            return

    if not results:
        logger.info(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_input}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        await state.clear()
        return

    for result in results:
        info_data = {
            "–†–µ–≥. –Ω–æ–º–µ—Ä": result.reg_number,
            "–ü–æ–ª–Ω–æ–µ –∏–º—è": result.name,
            "–¢–∏–ø —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è": result.type_of_staypermit,
            "–¢–∏–ø –≤–∏–∑—ã": result.visa_type,
            "–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞": result.passport_number,
            "–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è": result.arrival_date,
            "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏": result.issue_date,
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è": result.expired_date,
            "–°—Ç–∞—Ç—É—Å": result.status,
            "–ê–∫–∫–∞—É–Ω—Ç": result.account
        }
        info = "\n".join([f"{key}: {value}" for key, value in info_data.items()])
        
        file_path = f"src/temp/{result.reg_number}_stay_permit.pdf"
        
        if os.path.exists(file_path):
            try:
                document = FSInputFile(file_path)
                await message.answer_document(
                    document=document,
                    caption=f"üè† –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é –Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:\n\n{info}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–≥. –Ω–æ–º–µ—Ä–∞ {result.reg_number}")
        else:
            logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            await message.answer(f"üè† –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{info}\n\n‚ö†Ô∏è –§–∞–π–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –¥–ª—è user_id={user_id}")

@bot_router.message(F.text)
async def check_password_or_other_text(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    current_state = await state.get_state()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: text={message.text}, user_id={user_id}, state={current_state}")

    # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø–∞—Ä–æ–ª—è, —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å
    if await state.get_state() is not None:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        return

    with SessionLocal() as db:
        if is_authorized(db, user_id):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!", reply_markup=main_menu())
            return

    entered_password = message.text.strip()
    if entered_password != BOT_PASSWORD:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {entered_password}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    with SessionLocal() as db:
        user = create_or_update_user(db, user_id)
        if user:
            db.commit()
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=main_menu())
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")